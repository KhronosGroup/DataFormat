// Copyright (c) 2014-2016 The Khronos Group Inc.
// Copyright notice at https://www.khronos.org/registry/speccopyright.html
[[BPTC]]
== BPTC Compressed Texture Image Formats

_This description is derived from the ``BPTC Compressed Texture Image Formats''
section of the OpenGL 4.5 specification._

Compressed texture images stored using the BPTC compressed image formats are
represented as a collection of latexmath:[$4 \times 4$] texel blocks, where each block
contains 128 bits of texel data. The image is encoded as a normal 2D raster
image in which each latexmath:[$4 \times 4$] block is treated as a single pixel. If a
BPTC image has a width or height that is not a multiple of four, the data
corresponding to texels outside the image are irrelevant and undefined.

When a BPTC image with a width of _w_, height of _h_, and block size
of _blocksize_ (16 bytes) is decoded, the corresponding image size (in
bytes) is:

[latexmath]
++++++++++++++++
\begin{align*}
\left\lceil { w \over 4 } \right\rceil \times
\left\lceil { h \over 4 } \right\rceil \times
blocksize
\end{align*}
++++++++++++++++

When decoding a BPTC image, the block containing the texel at offset latexmath:[$(x,y)$]
begins at an offset (in bytes) relative to the base of the image of:

[latexmath]
++++++++++++++
\begin{align*}
blocksize \times
 \left( { \left\lceil  { w \over 4 } \right\rceil \times
          \left\lfloor { y \over 4 } \right\rfloor +
          \left\lfloor { x \over 4 } \right\rfloor } \right)
\end{align*}
++++++++++++++

The data corresponding to a specific texel latexmath:[$(x,y)$] are extracted from a
latexmath:[$4 \times 4$] texel block using a relative latexmath:[$(x,y)$] value of:

[latexmath]
++++++++++++++
\begin{align*}
(x \bmod 4,y \bmod 4)
\end{align*}
++++++++++++++

There are two distinct BPTC image formats each of which has two variants.
BC7 with or without an sRGB transform function used in the encoding of the
RGB channels compresses 8-bit unsigned, normalized fixed-point data.
BC6H in signed or unsigned form compresses high dynamic range
floating-point values. The formats are similar, so the description of the
BC6H format will reference significant sections of the BC7 description.

=== BC7

Each latexmath:[$4 \times 4$] block of texels consists of 128 bits of RGBA
image data, of which the RGB components may be encoded linearly or with the
sRGB transfer function.

Each block contains enough information to select and decode a pair of colors
called endpoints, interpolate between those endpoints in a variety of ways,
then remap the result into the final output.

Each block can contain data in one of eight modes. The mode is identified by
the lowest bits of the lowest byte. It is encoded as zero or more zeros
followed by a one. For example, using x to indicate a bit not included in
the mode number, mode 0 is encoded as xxxxxxx1 in the low byte in binary,
mode 5 is xx100000, and mode 7 is 10000000. Encoding the low byte as zero is
reserved and should not be used when encoding a BPTC texture.

All further decoding is driven by the values derived from the mode listed in
<<table-bptcmodes>> and <<table-bptcmodedescriptions>>. The fields in the
block are always in the same
order for all modes. Starting at the lowest bit after the mode and going up,
these fields are: partition number, rotation, index selection, color, alpha,
per-endpoint P-bit, shared P-bit, primary indices, and secondary indices.
The number of bits to be read in each field is determined directly from the
table.

Each block can be divided into between 1 and 3 groups of pixels with
independent compression parameters called subsets. A texel in a block with
one subset is always considered to be in subset zero. Otherwise, a number
determined by the number of partition bits is used to look up in
<<bptcP2subset>> or <<bptcP3subset>> for 2 and
3 subsets respectively. This partitioning is indexed by the X and Y within
the block to generate the subset index.

Each block has two colors for each subset, stored first by endpoint, then by
subset, then by color. For example, a format with two subsets and five color
bits would have five bits of red for endpoint 0 of the first subset, then
five bits of red for endpoint 1, then the two ends of the second subset,
then green and blue stored similarly. If a block has non-zero alpha bits,
the alpha data follows the color data with the same organization. If not,
alpha is overridden to 1.0. These bits are treated as the high bits of a
fixed-point value in a byte. If the format has a shared P-bit, there are two
bits for endpoints 0 and 1 from low to high. If the format has a per-endpoint
P-bits, then there are latexmath:[$2 \times subsets$] P-bits stored in the same
order as color and alpha. Both kinds of P-bits are added as a bit below the
color data stored in the byte. So, for a format with 5 red bits, the P-bit
ends up in bit 2. For final scaling, the top bits of the value are
replicated into any remaining bits in the byte. For the preceding example,
bits 6 and 7 would be written to bits 0 and 1.

The endpoint colors are interpolated using index values stored in the block.
The index bits are stored in x-major order. Each index has the number of
bits indicated by the mode except for one special index per subset called
the anchor index. Since the ordering of the endpoints is unimportant, we can
save one bit on one index per subset by ordering the endpoints such that the
highest bit is guaranteed to be zero. In partition zero, the anchor index is
always index zero. In other partitions, the anchor index is specified by
<<bptcA2index>>, <<bptcA32index>>, and <<bptcA33index>>. If secondary index
bits are present, they are read in the same manner. The anchor index information
is only used to determine the number of bits each index has when it's read from
the block data.

The endpoint color and alpha values used for final interpolation are the
decoded values corresponding to the applicable subset as selected above. The
index value for interpolating color comes from the secondary index for the
texel if the format has an index selection bit and its value is one and from
the primary index otherwise. The alpha index comes from the secondary index
if the block has a secondary index and the block either doesn't have an
index selection bit or that bit is zero and the primary index otherwise.

Interpolation is always performed using a 6-bit interpolation factor. The
effective interpolation factors for 2-, 3-, and 4-bit indices are given
in <<BPTCInterpolation>>.

[[BPTCInterpolation]]
.BPTC interpolation factors
[cols="h,16*",width="80%"]
|==========
^| 2 4+^| 0 4+^| 21 4+^| 43 4+^| 64
^| 3 2+^| 0 2+^| 9 2+^| 18 2+^|27 2+^| 37 2+^| 46 2+^| 55 2+^| 64
^| 4 ^| 0 ^| 4 ^| 9 ^| 13 ^| 17 ^| 21 ^| 26 ^| 30 ^| 34 ^| 38 ^| 43 ^| 47 ^| 51 ^| 55 ^| 60 ^| 64
|==========

The interpolation results in an RGBA color. If rotation bits are present,
this color is remapped according to <<BPTCRotation>>.

[[BPTCRotation]]
.BPTC Rotation bits
[cols="h,3",width="25%"]
|============
^| 0 | no change
^| 1 | swap(a,r)
^| 2 | swap(a,g)
^| 3 | swap(a,b)
|============

These 8-bit values should be interpreted as RGBA 8-bit normalized
channels, either linearly encoded or with the sRGB transfer function.

[[table-bptcmodes]]
.Mode-dependent BPTC parameters.
[options="header",width="80%"]
|============
^| Mode ^| NS ^| PB ^| RB ^| ISB ^| CB ^| AB ^| EPB ^| SPB ^| IB ^| IB2
^| 0    ^| 3  ^| 4  ^| 0  ^| 0   ^| 4  ^| 0  ^| 1   ^| 0   ^| 3  ^| 0
^| 1    ^| 2  ^| 6  ^| 0  ^| 0   ^| 6  ^| 0  ^| 0   ^| 1   ^| 3  ^| 0
^| 2    ^| 3  ^| 6  ^| 0  ^| 0   ^| 5  ^| 0  ^| 0   ^| 0   ^| 2  ^| 0
^| 3    ^| 2  ^| 6  ^| 0  ^| 0   ^| 7  ^| 0  ^| 1   ^| 0   ^| 2  ^| 0
^| 4    ^| 1  ^| 0  ^| 2  ^| 1   ^| 5  ^| 6  ^| 0   ^| 0   ^| 2  ^| 3
^| 5    ^| 1  ^| 0  ^| 2  ^| 0   ^| 7  ^| 8  ^| 0   ^| 0   ^| 2  ^| 2
^| 6    ^| 1  ^| 0  ^| 0  ^| 0   ^| 7  ^| 7  ^| 1   ^| 0   ^| 4  ^| 0
^| 7    ^| 2  ^| 6  ^| 0  ^| 0   ^| 5  ^| 5  ^| 1   ^| 0   ^| 2  ^| 0
|============

[[table-bptcmodedescriptions]]
.The full descriptions of the BPTC mode columns are as follows
[options="header",cols="1,7",width="45%"]
|============
^| Mode | As described previously
^| NS | Number of subsets in each partition
^| PB | Partition bits
^| RB | Rotation bits
^| ISB | Index selection bits
^| CB | Color bits
^| AB | Alpha bits
^| EPB | Endpoint P-bits
^| SPB | Shared P-bits
^| IB | Index bits per element
^| IB2 | Secondary index bits per element}
|============

[[bptcP2subset]]
.Partition table for BPTC 2 subset, with the 4Ã—4 block of values for each partition index value
|==================
4+^| 0 4+^| 1 4+^| 2 4+^| 3 4+^| 4 4+^| 5 4+^| 6 4+^| 7
| 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0
| 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 1 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 1 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1
| 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 1 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 1 | 1 | 1 | 0 | 1 | 1 | 1 | 0 | 0 | 1 | 1
| 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 1 | 1 | 1 | 0 | 1 | 1 | 1 | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 0 | 1 | 1 | 1

4+^| 8 4+^| 9 4+^| 10 4+^| 11 4+^| 12 4+^| 13 4+^| 14 4+^| 15
| 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0
| 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 0 | 0 | 0 | 0
| 0 | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 0 | 0 | 0 | 0
| 0 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1

4+^| 16 4+^| 17 4+^| 18 4+^| 19 4+^| 20 4+^| 21 4+^| 22 4+^| 23
| 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1
| 1 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1
| 1 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 1
| 1 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 1

4+^| 24 4+^| 25 4+^| 26 4+^| 27 4+^| 28 4+^| 29 4+^| 30 4+^| 31
| 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 1 | 1
| 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 1
| 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 1 | 1 | 1 | 0 | 1 | 1 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 1
| 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 0 | 1 | 1 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 1 | 1 | 0 | 0

4+^| 32 4+^| 33 4+^| 34 4+^| 35 4+^| 36 4+^| 37 4+^| 38 4+^| 39
| 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 1 | 0 | 1 | 0 | 1 | 1 | 0 | 0 | 1 | 0 | 1
| 0 | 1 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 0 | 1 | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 1 | 0
| 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 1 | 0 | 0 | 1 | 1 | 0 | 1 | 0 | 1 | 0
| 0 | 1 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 0 | 1 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 1

4+^| 40 4+^| 41 4+^| 42 4+^| 43 4+^| 44 4+^| 45 4+^| 46 4+^| 47
| 0 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0
| 0 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 1 | 1 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 0
| 1 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | 1 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 1 | 0 | 0 | 1 | 0 | 1 | 1 | 0
| 1 | 1 | 1 | 0 | 1 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 1 | 0 | 0 | 0 | 0

4+^| 48 4+^| 49 4+^| 50 4+^| 51 4+^| 52 4+^| 53 4+^| 54 4+^| 55
| 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 1
| 1 | 1 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 1 | 0 | 0 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 1
| 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 0 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | 0
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 0

4+^| 56 4+^| 57 4+^| 58 4+^| 59 4+^| 60 4+^| 61 4+^| 62 4+^| 63
| 0 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 0 | 0 | 1 | 0 | 0
| 1 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 0 | 1 | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 0 | 0 | 1 | 0 | 0
| 1 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 0 | 0 | 1 | 1 | 1
| 1 | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 1 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 1 | 1 | 1
|==================

[[bptcP3subset]]
.Partition table for BPTC 3 subset, with the 4Ã—4 block of values for each partition index value
|===============
4+^| 0 4+^| 1 4+^| 2 4+^| 3 4+^| 4 4+^| 5 4+^| 6 4+^| 7
| 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 2 | 2 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 2 | 2 | 0 | 0 | 1 | 1
| 0 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 2 | 0 | 0 | 1 | 0 | 0 | 2 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 2 | 2 | 0 | 0 | 1 | 1
| 0 | 2 | 2 | 1 | 2 | 2 | 1 | 1 | 2 | 2 | 1 | 1 | 0 | 0 | 1 | 1 | 1 | 1 | 2 | 2 | 0 | 0 | 2 | 2 | 1 | 1 | 1 | 1 | 2 | 2 | 1 | 1
| 2 | 2 | 2 | 2 | 2 | 2 | 2 | 1 | 2 | 2 | 1 | 1 | 0 | 1 | 1 | 1 | 1 | 1 | 2 | 2 | 0 | 0 | 2 | 2 | 1 | 1 | 1 | 1 | 2 | 2 | 1 | 1

4+^| 8 4+^| 9 4+^| 10 4+^| 11 4+^| 12 4+^| 13 4+^| 14 4+^| 15
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 2 | 0 | 1 | 1 | 2 | 0 | 1 | 2 | 2 | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 1
| 0 | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 0 | 0 | 1 | 2 | 0 | 1 | 1 | 2 | 0 | 1 | 2 | 2 | 0 | 1 | 1 | 2 | 2 | 0 | 0 | 1
| 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 2 | 2 | 2 | 2 | 0 | 0 | 1 | 2 | 0 | 1 | 1 | 2 | 0 | 1 | 2 | 2 | 1 | 1 | 2 | 2 | 2 | 2 | 0 | 0
| 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 0 | 0 | 1 | 2 | 0 | 1 | 1 | 2 | 0 | 1 | 2 | 2 | 1 | 2 | 2 | 2 | 2 | 2 | 2 | 0

4+^| 16 4+^| 17 4+^| 18 4+^| 19 4+^| 20 4+^| 21 4+^| 22 4+^| 23
| 0 | 0 | 0 | 1 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 2 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0
| 0 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 1 | 1 | 2 | 2 | 0 | 0 | 2 | 2 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | 1 | 1 | 1 | 0 | 0
| 0 | 1 | 1 | 2 | 2 | 0 | 0 | 1 | 1 | 1 | 2 | 2 | 0 | 0 | 2 | 2 | 0 | 2 | 2 | 2 | 2 | 2 | 2 | 1 | 0 | 1 | 2 | 2 | 2 | 2 | 1 | 0
| 1 | 1 | 2 | 2 | 2 | 2 | 0 | 0 | 1 | 1 | 2 | 2 | 1 | 1 | 1 | 1 | 0 | 2 | 2 | 2 | 2 | 2 | 2 | 1 | 0 | 1 | 2 | 2 | 2 | 2 | 1 | 0

4+^| 24 4+^| 25 4+^| 26 4+^| 27 4+^| 28 4+^| 29 4+^| 30 4+^| 31
| 0 | 1 | 2 | 2 | 0 | 0 | 1 | 2 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 2 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0
| 0 | 1 | 2 | 2 | 0 | 0 | 1 | 2 | 1 | 2 | 2 | 1 | 0 | 1 | 1 | 0 | 1 | 1 | 0 | 2 | 0 | 1 | 1 | 0 | 0 | 1 | 2 | 2 | 2 | 0 | 0 | 0
| 0 | 0 | 1 | 1 | 1 | 1 | 2 | 2 | 1 | 2 | 2 | 1 | 1 | 2 | 2 | 1 | 1 | 1 | 0 | 2 | 2 | 0 | 0 | 2 | 0 | 1 | 2 | 2 | 2 | 2 | 1 | 1
| 0 | 0 | 0 | 0 | 2 | 2 | 2 | 2 | 0 | 1 | 1 | 0 | 1 | 2 | 2 | 1 | 0 | 0 | 2 | 2 | 2 | 2 | 2 | 2 | 0 | 0 | 1 | 1 | 2 | 2 | 2 | 1

4+^| 32 4+^| 33 4+^| 34 4+^| 35 4+^| 36 4+^| 37 4+^| 38 4+^| 39
| 0 | 0 | 0 | 0 | 0 | 2 | 2 | 2 | 0 | 0 | 1 | 1 | 0 | 1 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 2 | 0 | 0 | 1 | 2 | 0 | 0 | 0 | 1 | 1
| 0 | 0 | 0 | 2 | 0 | 0 | 2 | 2 | 0 | 0 | 1 | 2 | 0 | 1 | 2 | 0 | 1 | 1 | 1 | 1 | 1 | 2 | 0 | 1 | 2 | 0 | 1 | 2 | 2 | 2 | 0 | 0
| 1 | 1 | 2 | 2 | 0 | 0 | 1 | 2 | 0 | 0 | 2 | 2 | 0 | 1 | 2 | 0 | 2 | 2 | 2 | 2 | 2 | 0 | 1 | 2 | 1 | 2 | 0 | 1 | 1 | 1 | 2 | 2
| 1 | 2 | 2 | 2 | 0 | 0 | 1 | 1 | 0 | 2 | 2 | 2 | 0 | 1 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 2 | 0 | 0 | 1 | 2 | 0 | 0 | 0 | 1 | 1

4+^| 40 4+^| 41 4+^| 42 4+^| 43 4+^| 44 4+^| 45 4+^| 46 4+^| 47
| 0 | 0 | 1 | 1 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 2 | 0 | 0 | 2 | 2 | 0 | 2 | 2 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0
| 1 | 1 | 2 | 2 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 2 | 2 | 0 | 0 | 1 | 1 | 1 | 2 | 2 | 1 | 2 | 2 | 2 | 2 | 2 | 1 | 2 | 1
| 2 | 2 | 0 | 0 | 2 | 2 | 2 | 2 | 2 | 1 | 2 | 1 | 0 | 0 | 2 | 2 | 0 | 0 | 2 | 2 | 0 | 2 | 2 | 0 | 2 | 2 | 2 | 2 | 2 | 1 | 2 | 1
| 0 | 0 | 1 | 1 | 2 | 2 | 2 | 2 | 2 | 1 | 2 | 1 | 1 | 1 | 2 | 2 | 0 | 0 | 1 | 1 | 1 | 2 | 2 | 1 | 0 | 1 | 0 | 1 | 2 | 1 | 2 | 1

4+^| 48 4+^| 49 4+^| 50 4+^| 51 4+^| 52 4+^| 53 4+^| 54 4+^| 55
| 0 | 1 | 0 | 1 | 0 | 2 | 2 | 2 | 0 | 0 | 0 | 2 | 0 | 0 | 0 | 0 | 0 | 2 | 2 | 2 | 0 | 0 | 0 | 2 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0
| 0 | 1 | 0 | 1 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 2 | 2 | 1 | 1 | 2 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 2 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0
| 0 | 1 | 0 | 1 | 0 | 2 | 2 | 2 | 0 | 0 | 0 | 2 | 2 | 1 | 1 | 2 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 2 | 0 | 1 | 1 | 0 | 2 | 1 | 1 | 2
| 2 | 2 | 2 | 2 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 2 | 2 | 1 | 1 | 2 | 0 | 2 | 2 | 2 | 0 | 0 | 0 | 2 | 2 | 2 | 2 | 2 | 2 | 1 | 1 | 2

4+^| 56 4+^| 57 4+^| 58 4+^| 59 4+^| 60 4+^| 61 4+^| 62 4+^| 63
| 0 | 1 | 1 | 0 | 0 | 0 | 2 | 2 | 0 | 0 | 2 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 0 | 2 | 2 | 2 | 0 | 1 | 0 | 1 | 0 | 1 | 1 | 1
| 0 | 1 | 1 | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 2 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 0 | 1 | 1
| 2 | 2 | 2 | 2 | 0 | 0 | 1 | 1 | 1 | 1 | 2 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 0 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 0 | 1
| 2 | 2 | 2 | 2 | 0 | 0 | 2 | 2 | 0 | 0 | 2 | 2 | 2 | 1 | 1 | 2 | 0 | 0 | 0 | 1 | 1 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 0
|==========

[[bptcA2index]]
.BPTC anchor index values for the second subset of two-subset partitioning. Values run right, then down.
[width="40%"]
|==============
>| 15 >| 15 >| 15 >| 15 >| 15 >| 15 >| 15 >| 15
>| 15 >| 15 >| 15 >| 15 >| 15 >| 15 >| 15 >| 15
>| 15 >|  2 >|  8 >|  2 >|  2 >|  8 >|  8 >| 15
>|  2 >|  8 >|  2 >|  2 >|  8 >|  8 >|  2 >|  2
>| 15 >| 15 >|  6 >|  8 >|  2 >|  8 >| 15 >| 15
>|  2 >|  8 >|  2 >|  2 >|  2 >| 15 >| 15 >|  6
>|  6 >|  2 >|  6 >|  8 >| 15 >| 15 >|  2 >|  2
>| 15 >| 15 >| 15 >| 15 >| 15 >|  2 >|  2 >| 15
|==============

[[bptcA32index]]
.BPTC anchor index values for the second subset of three-subset partitioning. Values run right, then down.
[width="40%"]
|================
>|  3 >|  3 >| 15 >| 15 >|  8 >|  3 >| 15 >| 15
>|  8 >|  8 >|  6 >|  6 >|  6 >|  5 >|  3 >|  3
>|  3 >|  3 >|  8 >| 15 >|  3 >|  3 >|  6 >| 10
>|  5 >|  8 >|  8 >|  6 >|  8 >|  5 >| 15 >| 15
>|  8 >| 15 >|  3 >|  5 >|  6 >| 10 >|  8 >| 15
>| 15 >|  3 >| 15 >|  5 >| 15 >| 15 >| 15 >| 15
>|  3 >| 15 >|  5 >|  5 >|  5 >|  8 >|  5 >| 10
>|  5 >| 10 >|  8 >| 13 >| 15 >| 12 >|  3 >|  3
|================

[[bptcA33index]]
.BPTC anchor index values for the third subset of three-subset partitioning. Values run right, then down.
[width="40%"]
|===============
>| 15 >|  8 >|  8 >|  3 >| 15 >| 15 >|  3 >|  8
>| 15 >| 15 >| 15 >| 15 >| 15 >| 15 >| 15 >|  8
>| 15 >|  8 >| 15 >|  3 >| 15 >|  8 >| 15 >|  8
>|  3 >| 15 >|  6 >| 10 >| 15 >| 15 >| 10 >|  8
>| 15 >|  3 >| 15 >| 10 >| 10 >|  8 >|  9 >| 10
>|  6 >| 15 >|  8 >| 15 >|  3 >|  6 >|  6 >|  8
>| 15 >|  3 >| 15 >| 15 >| 15 >| 15 >| 15 >| 15
>| 15 >| 15 >| 15 >| 15 >|  3 >| 15 >| 15 >|  8
|===============

=== BC6H

Each latexmath:[$4 \times 4$] block of texels consists of 128 bits of RGB data. These
formats are very similar and will be described together. In the description
and pseudocode below, _signed_ will be used as a condition which is true
for the signed version of the format and false for the unsigned version of the format.
Both formats only contain RGB data, so the returned alpha value is 1.0. If a
block uses a reserved or invalid encoding, the return value is latexmath:[$(0,0,0,1)$].

Each block can contain data in one of 14 modes. The mode number is encoded
in either the low two bits or the low five bits. If the low two bits are
less than two, that is the mode number, otherwise the low five bits the mode
number. Mode numbers not listed in <<table-bptcblockmodes>> are reserved
(19, 23, 27, and 31).

The data for the compressed blocks is stored in a different format for each
mode. The formats are specified in <<table-bptcblockformat>>. The format
strings are intended to be read from left to right with the LSB on the left.
Each element is of the form latexmath:[$v[a \colon b\]$]. If latexmath:[$a \ge b$], this indicates
extracting latexmath:[$b-a+1$] bits from the block at that location and put them in the
corresponding bits of the variable _v_. If _a_ < _b_, then the bits are
reversed. latexmath:[$v[a\]$] is used as a shorthand for the one bit latexmath:[$v[a \colon a\]$]. As an
example, latexmath:[$m[1 \colon0 \],g2[4\]$] would move the low two bits from the block into the
low two bits of m then the next bit of the block into bit 4 of latexmath:[$g2$]. The
variable names given in the table will be referred to in the language below.

Subsets and indices work in much the same way as described for the
fixed-point formats above. If a float block has no partition bits, then it
is a single-subset block. If it has partition bits, then it is a 2 subset
block. The partition index references the first half of
<<bptcP2subset>>. Indices are read in the same way as the
fixed-point formats including obeying the anchor values for index 0 and as
needed by <<bptcA2index>>.

In a single-subset blocks, the two endpoints are contained in latexmath:[$r_0,g_0,b_0$]
(hence latexmath:[$e_0$]) and latexmath:[$r_1,g_1,b_1$] (hence latexmath:[$e_1$]). In a two-subset block, the
endpoints for the second subset are in latexmath:[$r_2,g_2,b_2$] and latexmath:[$r_3,g_3,b_3$]. The
value in latexmath:[$e_0$] is sign-extended if the format of the texture is signed. The
values in latexmath:[$e_1$] (and latexmath:[$e_2$] and latexmath:[$e_3$] if the block is two-subset) are
sign-extended if the format of the texture is signed or if the block mode
has transformed endpoints. If the mode has transformed endpoints, the values
from latexmath:[$e_0$] are used as a base to offset all other endpoints, wrapped at the
number of endpoint bits. For example, latexmath:[$r_1 = (r_0+r_1)$] & latexmath:[$((1 \ll EPB)-1)$].

<<<

Next, the endpoints are unquantized to maximize the usage of the bits and
to ensure that the negative ranges are oriented properly to interpolate as
a two's complement value. The following pseudocode assumes the computation
is being done using sufficiently large intermediate values to avoid
overflow. For the unsigned float format, we unquantize a value latexmath:[$x$] to
latexmath:[$unq$] by:

-----
if (EPB >= 15)
    unq = x;
else if (x == 0)
    unq = 0;
else if (x == ((1 << EPB)-1))
    unq = 0xFFFF;
else
    unq = ((x << 15) + 0x4000) >> (EPB-1);
-----

The signed float unquantization is similar, but needs to worry about
orienting the negative range:

-----
s = 0;
if (EPB >= 16) {
    unq = x;
} else {
    if (x < 0) {
        s = 1;
        x = -x;
    }

    if (x == 0)
        unq = 0;
    else if (x >= ((1 << (EPB-1))-1))
        unq = 0x7FFF;
    else
        unq = ((x << 15) + 0x4000) >> (EPB-1);

    if (s)
        unq = -unq;
}
-----

After the endpoints are unquantized, interpolation proceeds as in the
fixed-point formats above including the interpolation weight table.

The interpolated values are passed through a final unquantization step. For
the unsigned format, this step simply multiplies by latexmath:[$31 \over 64$]. The
signed format negates negative components, multiplies by latexmath:[$31 \over 32$], then
ORs in the sign bit if the original value was negative.

The resultant value should be a legal 16-bit half float.

[[table-bptcblockmodes]]
.Endpoint and partition parameters for BPTC block modes
[options="header", width="70%"]
|==============
^| Mode Number  ^| Transformed Endpoints ^| Partition Bits (PB) ^| Endpoint Bits (EPB)  ^| Delta Bits
^| 0      ^| 1            ^| 5         ^| 10         ^| {5, 5, 5}
^| 1      ^| 1            ^| 5         ^| 7          ^| {6, 6, 6}
^| 2      ^| 1            ^| 5         ^| 11         ^| {5, 4, 4}
^| 6      ^| 1            ^| 5         ^| 11         ^| {4, 5, 4}
^| 10     ^| 1            ^| 5         ^| 11         ^| {4, 4, 5}
^| 14     ^| 1            ^| 5         ^| 9          ^| {5, 5, 5}
^| 18     ^| 1            ^| 5         ^| 8          ^| {6, 5, 5}
^| 22     ^| 1            ^| 5         ^| 8          ^| {5, 6, 5}
^| 26     ^| 1            ^| 5         ^| 8          ^| {5, 5, 6}
^| 30     ^| 0            ^| 5         ^| 6          ^| {6, 6, 6}
^| 3      ^| 0            ^| 0         ^| 10         ^| {10, 10, 10}
^| 7      ^| 1            ^| 0         ^| 11         ^| {9, 9, 9}
^| 11     ^| 1            ^| 0         ^| 12         ^| {8, 8, 8}
^| 15     ^| 1            ^| 0         ^| 16         ^| {4, 4, 4}
|==============

[[table-bptcblockformat]]
.Block formats for BC6H block modes
[options="header",cols="2,10",width="75%"]
|===========================
^| Mode Number  | Block Format
^|  0     | m[1:0], g2[4], b2[4], b3[4], r0[9:0], g0[9:0], b0[9:0], r1[4:0],
         g3[4], g2[3:0], g1[4:0], b3[0], g3[3:0], b1[4:0], b3[1], b2[3:0],
         r2[4:0], b3[2], r3[4:0],
^|  1     | m[1:0], g2[5], g3[4], g3[5], r0[6:0], b3[0], b3[1], b2[4],
         g0[6:0], b2[5], b3[2], g2[4], b0[6:0], b3[3], b3[5], b3[4],
         r1[5:0], g2[3:0], g1[5:0], g3[3:0], b1[5:0], b2[3:0], r2[5:0],
         r3[5:0]
^|  2     | m[4:0], r0[9:0], g0[9:0], b0[9:0], r1[4:0], r0[10], g2[3:0],
         g1[3:0], g0[10], b3[0], g3[3:0], b1[3:0], b0[10], b3[1], b2[3:0],
         r2[4:0], b3[2], r3[4:0],
^|  6     | m[4:0], r0[9:0], g0[9:0], b0[9:0], r1[3:0], r0[10], g3[4],
         g2[3:0], g1[4:0], g0[10], g3[3:0], b1[3:0], b0[10], b3[1],
         b2[3:0], r2[3:0], b3[0], b3[2], r3[3:0], g2[4], b3[3]
^| 10     | m[4:0], r0[9:0], g0[9:0], b0[9:0], r1[3:0], r0[10], b2[4],
         g2[3:0], g1[3:0], g0[10], b3[0], g3[3:0], b1[4:0], b0[10],
         b2[3:0], r2[3:0], b3[1], b3[2], r3[3:0], b3[4], b3[3]
^| 14     | m[4:0], r0[8:0], b2[4], g0[8:0], g2[4], b0[8:0], b3[4], r1[4:0],
         g3[4], g2[3:0], g1[4:0], b3[0], g3[3:0], b1[4:0], b3[1], b2[3:0],
         r2[4:0], b3[2], r3[4:0], b3[3]
^| 18     | m[4:0], r0[7:0], g3[4], b2[4], g0[7:0], b3[2], g2[4], b0[7:0],
         b3[3], b3[4], r1[5:0], g2[3:0], g1[4:0], b3[0], g3[3:0], b1[4:0],
         b3[1], b2[3:0], r2[5:0], r3[5:0]
^| 22     | m[4:0], r0[7:0], b3[0], b2[4], g0[7:0], g2[5], g2[4], b0[7:0],
         g3[5], b3[4], r1[4:0], g3[4], g2[3:0], g1[5:0], g3[3:0], b1[4:0],
         b3[1], b2[3:0], r2[4:0], b3[2], r3[4:0], b3[3]
^| 26     | m[4:0], r0[7:0], b3[1], b2[4], g0[7:0], b2[5], g2[4], b0[7:0],
         b3[5], b3[4], r1[4:0], g3[4], g2[3:0], g1[4:0], b3[0], g3[3:0],
         b1[5:0], b2[3:0], r2[4:0], b3[2], r3[4:0], b3[3]
^| 30     | m[4:0], r0[5:0], g3[4], b3[0], b3[1], b2[4], g0[5:0], g2[5],
         b2[5], b3[2], g2[4], b0[5:0], g3[5], b3[3], b3[5], b3[4],
         r1[5:0], g2[3:0], g1[5:0], g3[3:0], b1[5:0], b2[3:0], r2[5:0],
         r3[5:0]
^|  3     | m[4:0], r0[9:0], g0[9:0], b0[9:0], r1[9:0], g1[9:0], b1[9:0]
^|  7     | m[4:0], r0[9:0], g0[9:0], b0[9:0], r1[8:0], r0[10], g1[8:0],
         g0[10], b1[8:0], b0[10]
^| 11     | m[4:0], r0[9:0], g0[9:0], b0[9:0], r1[7:0], r0[10:11], g1[7:0],
         g0[10:11], b1[7:0], b0[10:11]
^| 15     | m[4:0], r0[9:0], g0[9:0], b0[9:0], r1[3:0], r0[10:15], g1[3:0],
         g0[10:15], b1[3:0], b0[10:15]
|==========================
