// Copyright (C) 2008-2015 The Khronos Group Inc. All Rights Reserved.

== RGTC Compressed Texture Image Formats

Compressed texture images stored using the RGTC compressed image encodings
are represented as a collection of 4×4 texel blocks, where each
block contains 64 or 128 bits of texel data. The image is encoded as a
normal 2D raster image in which each 4×4 block is treated as a
single pixel. If an RGTC image has a width or height that is not a multiple
of four, the data corresponding to texels outside the image are irrelevant
and undefined.

When an RGTC image with a width of latexmath:[$w$], height of latexmath:[$h$], and block
size of latexmath:[$blocksize$] (8 or 16 bytes) is decoded, the corresponding image
size (in bytes) is:

[latexmath]
++++++++++++++++++++++
    $$\left\lceil { w \over 4 } \right\rceil \times
    \left\lceil { h \over 4 } \right\rceil \times
    blocksize$$
++++++++++++++++++++++

When decoding an RGTC image, the block containing the texel at offset
latexmath:[$(x,y)$] begins at an offset (in bytes) relative to the base of the image of:

[latexmath]
++++++++++++++++++++++
    $$blocksize \times
       \left( { \left\lceil  { w \over 4 } \right\rceil \times
                \left\lfloor { y \over 4 } \right\rfloor +
                \left\lfloor { x \over 4 } \right\rfloor } \right)$$
++++++++++++++++++++++

The data corresponding to a specific texel latexmath:[$(x,y)$] are extracted from a
latexmath:[$4 \times 4$] texel block using a relative latexmath:[$(x,y)$] value of

[latexmath]
++++++++++++++++++++++
    $$(x \bmod 4,y \bmod 4).$$
++++++++++++++++++++++

There are four distinct RGTC image formats:


// % _ in subsection headers come out looking awful in the .con file, so
// % index them separately.

=== BC4 unsigned

Each latexmath:[$4 \times 4$] block of texels consists of 64 bits of unsigned red image
data.

Each red image data block is encoded as a sequence of 8 bytes, called (in
order of increasing address):

    red_0, red_1, bits_0, bits_1, bits_2, bits_3, bits_4, bits_5

The 6 latexmath:[$bits_*$] bytes of the block are decoded into a 48-bit bit vector:

[latexmath]
++++++++++++++++++++++
      $$bits =
        bits_0 +
          256 \times
            \left( { bits_1 + 256 \times
              \left( { bits_2 + 256 \times
                \left( { bits_3 + 256 \times
                  \left( { bits_4 + 256 \times bits_5 }
                  \right) }
                \right) }
              \right) }
            \right)$$
++++++++++++++++++++++

latexmath:[$red_0$] and latexmath:[$red_1$] are 8-bit unsigned integers that are unpacked to red
values latexmath:[$RED_0$] and
//  \ifdep{
// $RED_1$ as though they were pixels with a {\em format} of
// \glc{LUMINANCE} and a {\em type} of \glc{UNSIGNED\_BYTE}.
//  }{
latexmath:[$RED_1$].
//  } %\ifdep

latexmath:[$bits$] is a 48-bit unsigned integer, from which a three-bit control code is
extracted for a texel at location latexmath:[$(x,y)$] in the block using:

[latexmath]
++++++++++++++++++++++
    $$ code(x,y) =
        bits \left[
            3 \times (4 \times y + x) + 2 \dots
            3 \times (4 \times y + x) + 0 \right]$$
++++++++++++++++++++++

where bit 47 is the most significant and bit 0 is the least significant bit.

The red value latexmath:[$R$] for a texel at location latexmath:[$(x,y)$] in the block is given by:

[options="header",width="43%",cols="1,2"]
|==========
| R value | Condition
| latexmath:[$RED_0$]                         | latexmath:[$red_0 > red_1, code(x,y) = 0$]
| latexmath:[$RED_1$]                         | latexmath:[$red_0 > red_1, code(x,y) = 1$]
| latexmath:[${ 6 RED_0 +   RED_1 } \over 7$] | latexmath:[$red_0 > red_1, code(x,y) = 2$]
| latexmath:[${ 5 RED_0 + 2 RED_1 } \over 7$] | latexmath:[$red_0 > red_1, code(x,y) = 3$]
| latexmath:[${ 4 RED_0 + 3 RED_1 } \over 7$] | latexmath:[$red_0 > red_1, code(x,y) = 4$]
| latexmath:[${ 3 RED_0 + 4 RED_1 } \over 7$] | latexmath:[$red_0 > red_1, code(x,y) = 5$]
| latexmath:[${ 2 RED_0 + 5 RED_1 } \over 7$] | latexmath:[$red_0 > red_1, code(x,y) = 6$]
| latexmath:[${   RED_0 + 6 RED_1 } \over 7$] | latexmath:[$red_0 > red_1, code(x,y) = 7$]
| latexmath:[$RED_0$]                         | latexmath:[$red_0 \leq red_1, code(x,y) = 0$]
| latexmath:[$RED_1$]                         | latexmath:[$red_0 \leq red_1, code(x,y) = 1$]
| latexmath:[${ 4 RED_0 +   RED_1 } \over 5$] | latexmath:[$red_0 \leq red_1, code(x,y) = 2$]
| latexmath:[${ 3 RED_0 + 2 RED_1 } \over 5$] | latexmath:[$red_0 \leq red_1, code(x,y) = 3$]
| latexmath:[${ 2 RED_0 + 3 RED_1 } \over 5$] | latexmath:[$red_0 \leq red_1, code(x,y) = 4$]
| latexmath:[${   RED_0 + 4 RED_1 } \over 5$] | latexmath:[$red_0 \leq red_1, code(x,y) = 5$]
| latexmath:[$RED_{min}$]                     | latexmath:[$red_0 \leq red_1, code(x,y) = 6$]
| latexmath:[$RED_{max}$]                     | latexmath:[$red_0 \leq red_1, code(x,y) = 7$]
|==========

latexmath:[$RED_{min}$] and latexmath:[$RED_{max}$] are 0.0 and 1.0 respectively.

Since the decoded texel has a red format, the resulting RGBA value for the
texel is latexmath:[$(R,0,0,1)$].


=== BC4 signed

Each latexmath:[$4 \times 4$] block of texels consists of 64 bits of signed red image
data. The red values of a texel are extracted in the same way as
BC4 unsigned except latexmath:[$red_0$], latexmath:[$red_1$], latexmath:[$RED_0$], latexmath:[$RED_1$],
latexmath:[$RED_{min}$], and latexmath:[$RED_{max}$] are signed values defined as follows:

latexmath:[$red_0$] and latexmath:[$red_1$] are 8-bit signed (twos complement) integers.

[options="header",width="30%",cols="2,3"]
|===========
| latexmath:[$RED_0$] | Case
| latexmath:[$red_0 \over 127.0$] | latexmath:[$red_0 > -128$]
| latexmath:[$-1.0$] | latexmath:[$red_0 = -128$]
|===========

[options="header",width="30%",cols="2,3"]
|===========
| latexmath:[$RED_0$] | Case
| latexmath:[$red_1 \over 127.0$] | latexmath:[$red_1 > -128$]
| latexmath:[$-1.0$] | latexmath:[$red_1 = -128$]
|===========

[latexmath]
+++++++++++
        $$RED_{min} = -1.0$$
+++++++++++

[latexmath]
+++++++++++
        $$RED_{max} = 1.0$$
+++++++++++

CAVEAT for signed latexmath:[$red_0$] and latexmath:[$red_1$] values: the expressions
    latexmath:[$red_0 > red_1$] and latexmath:[$red_0 \leq red_1$]
above are considered undefined (read: may vary by implementation) when
    latexmath:[$red_0 = -127$] and latexmath:[$red_1 = -128$].
This is because if latexmath:[$red_0$] were remapped to -127 prior to the comparison to
reduce the latency of a hardware decompressor, the expressions would reverse
their logic. Encoders for the signed red-green formats should avoid encoding
blocks where
    latexmath:[$red_0 = -127$] and latexmath:[$red_1 = -128$].

=== BC5 unsigned

Each latexmath:[$4 \times 4$] block of texels consists of 64 bits of compressed unsigned
red image data followed by 64 bits of compressed unsigned green image data.

The first 64 bits of compressed red are decoded exactly like
BC4 unsigned above.

The second 64 bits of compressed green are decoded exactly like
BC4 unsigned above except the decoded value latexmath:[$R$] for this
second block is considered the resulting green value latexmath:[$G$].

Since the decoded texel has a red-green format, the resulting RGBA value for
the texel is latexmath:[$(R,G,0,1)$].

=== BC5 signed

Each latexmath:[$4 \times 4$] block of texels consists of 64 bits of compressed signed
red image data followed by 64 bits of compressed signed green image data.

The first 64 bits of compressed red are decoded exactly like
BC4 signed above.

The second 64 bits of compressed green are decoded exactly like
BC4 signed above except the decoded value latexmath:[$R$] for
this second block is considered the resulting green value latexmath:[$G$].

Since this image has a red-green format, the resulting RGBA value is
latexmath:[$(R,G,0,1)$].
